# -*- coding: utf-8 -*-
import serial
import sys
import cv2
import numpy
import cv2
import numpy as np

font = cv2.FONT_HERSHEY_SIMPLEX

# red
r_low_hsv1  = np.array([171, 23,  100])
r_high_hsv1 = np.array([180, 255, 255])
r_low_hsv2  = np.array([0,   23,  100])
r_high_hsv2 = np.array([9,   255, 255])

# green
g_low_hsv1  = np.array([40,  60,  50 ])
g_high_hsv1 = np.array([60,  255, 255])

cap = cv2.VideoCapture(0)

##--------------------- get_track --------------------

def get_track(cap, index):
    global r_low_hsv1, r_high_hsv1, r_low_hsv2, r_high_hsv2, road_cnt, time_cnt, state
    while True:
        try:
            success, img = cap.read()
            # 颜色转换函数 转换为hsv cv2.COLOR_BGR2HSV
            hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
            # mask是只突出指定颜色的图片
            mask1 = cv2.inRange(hsv, lowerb=r_low_hsv1, upperb=r_high_hsv1)
            mask2 = cv2.inRange(hsv, lowerb=r_low_hsv2, upperb=r_high_hsv2)
            if index == 2:
                mask = mask1 + mask2
            elif index == 1:
                mask = cv2.inRange(hsv, lowerb=g_low_hsv1, upperb=g_high_hsv1)
            # 中值滤波降噪
            median = cv2.medianBlur(mask, 5)
            """
            ---
            contours返回轮廓的点集
            ---
            hierachy返回N*4的矩阵， N表示轮廓个数
                    
            第一个数：表示同一级轮廓的下个轮廓的编号，如果这一级轮廓没有下一个轮廓，一般是这一级轮廓的最后一个的时候，则为-1
            第二个数：表示同一级轮廓的上个轮廓的编号，如果这一级轮廓没有上一个轮廓，一般是这一级轮廓的第一个的时候，则为-1
            第三个数：表示该轮廓包含的下一级轮廓的第一个的编号，假如没有，则为-1
            第四个数： 表示该轮廓的上一级轮廓的编号，假如没有上一级，则为-1
            """
            contours, hierarchy = cv2.findContours(median, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            #  cv2.RETR_EXTERNAL 只寻找最高级轮廓，即最外面的轮廓
            if len(contours) != 0:
                area = []
                # 找到最大的轮廓
                for k in range(len(contours)):
                    # contourArea面积计算
                    area.append(cv2.contourArea(contours[k]))

                # 面积最大轮廓的索引
                max_idx = np.argmax(np.array(area))

                # 生成最小的外界矩形
                rect = cv2.minAreaRect(contours[max_idx])

                # boxPoints返回四个点坐标
                box = cv2.boxPoints(rect)
                box = np.int0(box)  # 将坐标规范化为整数

                # 在opencv的坐标体系下，纵坐标最小的是top_point，纵坐标最大的是bottom_point， 横坐标最小的是left_point，横坐标最大的是right_point
                # 获取四个顶点坐标
                left_point_x = np.min(box[:, 0])
                right_point_x = np.max(box[:, 0])
                top_point_y = np.min(box[:, 1])
                bottom_point_y = np.max(box[:, 1])
                left_point_y = box[:, 1][np.where(box[:, 0] == left_point_x)][0]
                right_point_y = box[:, 1][np.where(box[:, 0] == right_point_x)][0]
                top_point_x = box[:, 0][np.where(box[:, 1] == top_point_y)][0]
                bottom_point_x = box[:, 0][np.where(box[:, 1] == bottom_point_y)][0]
                # 即获得矩形框四个点在opencv坐标体系下的各个点的值
                cv2.drawContours(img, [box], 0, (255, 0, 0), 3)
##_-------------------------------------------------------------------------------------------------
                cv2.line(img, (640-100, 0), (640-100, 480), (0, 255, 0), 5)
                cv2.line(img, (  0+100, 0), (  0+100, 480), (0, 255, 0), 5)
                
                if left_point_x > 640-100 or right_point_x < 0+100:
                    if road_cnt % 10 >= 5 and road_cnt % 10 <= 9:
                        road_cnt = road_cnt + 1
                    elif road_cnt % 10 >= 1 and road_cnt % 10 <= 4:
                        road_cnt = road_cnt - 1
                
                    return [0, 0, 0, 0, 0]

                ##-----                    
                elif bottom_point_y - top_point_y > 350:
                    if road_cnt % 10 >= 5 and road_cnt % 10 <= 9:
                        road_cnt = road_cnt + 1
                    elif road_cnt % 10 >= 1 and road_cnt % 10 <= 4:
                        road_cnt = road_cnt - 1
                    
                    if bottom_point_x - left_point_x == 0 or bottom_point_x - right_point_x == 0:
                        tmp_angle = 0
                    elif (bottom_point_x - left_point_x)  * (bottom_point_x - left_point_x)  + \
                         (bottom_point_y - left_point_y)  * (bottom_point_y - left_point_y)  < \
                         (bottom_point_x - right_point_x) * (bottom_point_x - right_point_x) + \
                         (bottom_point_y - right_point_y) * (bottom_point_y - right_point_y):
                        tmp_angle = int(rect[2])
                    else:
                        tmp_angle = int(rect[2] - 90)
                    tmp_x = 0
                    
                    cv2.circle(img, (320, 240 + tmp_x), 3, (0, 255, 0), 5)
                    cv2.line(img, (640, 240 + int(320 * np.tan(tmp_angle / 180 * np.pi))), \
                                  (  0, 240 - int(320 * np.tan(tmp_angle / 180 * np.pi))), \
                                    (0, 0, 255), 5)
                    cv2.putText(img, str(tmp_x) + ',' + str(tmp_angle), (400, 240), font, 1, (0, 0, 255), 2)                    
                    
                ##-----
                else:
                    if road_cnt % 10 >= 0 and road_cnt % 10 <= 4:
                        road_cnt = road_cnt + 1
                    elif road_cnt % 10 >= 6 and road_cnt % 10 <= 9:
                        road_cnt = road_cnt - 1
                        
                    if bottom_point_x - left_point_x == 0 or bottom_point_x - right_point_x == 0:
                        tmp_angle = 0
                    elif (bottom_point_x - left_point_x)  * (bottom_point_x - left_point_x)  + \
                         (bottom_point_y - left_point_y)  * (bottom_point_y - left_point_y)  < \
                         (bottom_point_x - right_point_x) * (bottom_point_x - right_point_x) + \
                         (bottom_point_y - right_point_y) * (bottom_point_y - right_point_y):
                        tmp_angle = int(rect[2] - 90)
                    else:
                        tmp_angle = int(rect[2])
                    tmp_x = -240 + int(np.tan(tmp_angle / 180 * np.pi) * (320 - rect[0][0]) + rect[0][1])
                    
                    cv2.circle(img, (320, 240 + tmp_x), 3, (0, 255, 0), 5)
                    cv2.line(img, (320, 240 + tmp_x), (320, 240), (0, 0, 255), 5)
                    cv2.putText(img, str(tmp_x) + ',' + str(tmp_angle), (400, 240), font, 1, (0, 0, 255), 2)
                
                bias_x = int(rect[0][0]) - 320
                bias_y = int(rect[0][1]) - 240
                d_x = right_point_x - left_point_x
                
                cv2.putText(img, str(       bias_x), (640-70,  60), font, 1, (0, 255, 0), 2)
                cv2.putText(img, str(       bias_y), (640-70, 120), font, 1, (0, 255, 0), 2)
                cv2.putText(img, str(          d_x), (640-70, 180), font, 1, (0, 255, 0), 2)
                
                cv2.putText(img, str(int(road_cnt)), (640-70, 240), font, 1, (0, 0, 255), 2)
                cv2.putText(img, str(     time_cnt), (640-70, 300), font, 1, (0, 0, 255), 2)
                cv2.putText(img, str(        state), (640-70, 360), font, 1, (0, 0, 255), 2)
 
                cv2.imshow('img', img)
                #cv2.imshow('median', median)
                
                return [tmp_x, tmp_angle, bias_x, bias_y, d_x]
                
            else:
                return [0, 0, 0, 0, 0]
        except:
            pass
     
rect = [[0]]
top_point_y = 0
bottom_point_y = 0         
ser = serial.Serial("/dev/ttyAMA0", 115200, timeout = 0.5)
                      

if cap.isOpened():
    cv2.namedWindow("img")
    cv2.namedWindow("median")
    cv2.namedWindow("img_3")
    while True:
        success,img = cap.read()
        cv2.imshow("img", img)
        # 颜色转换函数 转换为hsv cv2.COLOR_BGR2HSV
        hsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)

        # mask是只突出指定颜色的图片
        
        #condition1 --- mask1+mask2 --- red
        #mask1 = cv2.inRange(hsv, lowerb=r_low_hsv1, upperb=r_high_hsv1)
        #mask2 = cv2.inRange(hsv, lowerb=r_low_hsv2, upperb=r_high_hsv2)
        #mask = mask1 + mask2
        
        #condition2 --- mask --- green
        mask = cv2.inRange(hsv, lowerb=g_low_hsv1, upperb=g_high_hsv1)
        # 中值滤波降噪
        median = cv2.medianBlur(mask, 5)

        contours, hierarchy = cv2.findContours(median, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if len(contours) != 0:
            area = []
            # 找到最大的轮廓
            for k in range(len(contours)):
                area.append(cv2.contourArea(contours[k]))
            max_idx = np.argmax(np.array(area))
            # 画出边缘
            draw_img3 = cv2.drawContours(img, contours[max_idx], -1, (0, 0, 255), 2)

            rect = cv2.minAreaRect(contours[max_idx])
            box_ = cv2.boxPoints(rect)
            box = np.int0(box_)  # 将坐标规范化为整数
            # 绘制矩形
            cv2.drawContours(img, [box], 0, (255, 0, 0), 5)
            # 获取四个顶点坐标
            left_point_x = np.min(box[:, 0])
            right_point_x = np.max(box[:, 0])
            top_point_y = np.min(box[:, 1])
            bottom_point_y = np.max(box[:, 1])
            left_point_y = box[:, 1][np.where(box[:, 0] == left_point_x)][0]
            right_point_y = box[:, 1][np.where(box[:, 0] == right_point_x)][0]
            top_point_x = box[:, 0][np.where(box[:, 1] == top_point_y)][0]
            bottom_point_x = box[:, 0][np.where(box[:, 1] == bottom_point_y)][0]
            # 添加信息
            cv2.circle(img, (int(rect[0][0]), int(rect[0][1])), 3, (255, 0, 0), 5)
            cv2.line(img, (bottom_point_x, bottom_point_y), (img.shape[1] - 1, bottom_point_y), (255, 0, 0), 2)
            cv2.putText(img, 'center', (int(rect[0][0]), int(rect[0][1])), font, 1, (0, 255, 0), 2)
            cv2.putText(img, 'left', (left_point_x, left_point_y), font, 1, (0, 255, 0), 2)
            cv2.putText(img, 'right', (right_point_x, right_point_y), font, 1, (0, 255, 0), 2)
            cv2.putText(img, 'top', (top_point_x, top_point_y), font, 1, (0, 255, 0), 2)
            cv2.putText(img, 'bottom', (bottom_point_x, bottom_point_y), font, 1, (0, 255, 0), 2)

            if bottom_point_x-left_point_x == 0 or bottom_point_x-right_point_x == 0:
                cv2.putText(img, str(90), (bottom_point_x, bottom_point_y), font, 1, (0, 255, 255), 2)
                text = 'x:' + str(int(rect[0][0])) + ' y:' + str(int(rect[0][1])) + ' A:' + str((right_point_x-left_point_x)*(right_point_x-left_point_x)+(bottom_point_y-top_point_y)*(bottom_point_y-top_point_y))
                cv2.putText(img, text, (10, 30), font, 1, (0, 255, 0), 2, cv2.LINE_AA, 0)  # 显示心位置
            elif (bottom_point_x-left_point_x)*(bottom_point_x-left_point_x)+(bottom_point_y-left_point_y)*(bottom_point_y-left_point_y) < (bottom_point_x-right_point_x)*(bottom_point_x-right_point_x)+(bottom_point_y-right_point_y)*(bottom_point_y-right_point_y):
                cv2.putText(img, str(-round(rect[2])), (bottom_point_x, bottom_point_y), font, 1, (0, 255, 255), 2)
                text = 'x:' + str(int(rect[0][0])) + ' y:' + str(int(rect[0][1])) + ' A:' + str((bottom_point_x-left_point_x)*(bottom_point_x-left_point_x)+(bottom_point_y-left_point_y)*(bottom_point_y-left_point_y) + (bottom_point_x-right_point_x)*(bottom_point_x-right_point_x)+(bottom_point_y-right_point_y)*(bottom_point_y-right_point_y))
                cv2.putText(img, text, (10, 30), font, 1, (0, 255, 0), 2, cv2.LINE_AA, 0)  # 显示心位置
            else:
                cv2.putText(img, str(-round(rect[2])+90), (bottom_point_x, bottom_point_y), font, 1, (0, 255, 255), 2)
                text = 'x:' + str(int(rect[0][0])) + ' y:' + str(int(rect[0][1])) + ' A:' + str((bottom_point_x-left_point_x)*(bottom_point_x-left_point_x)+(bottom_point_y-left_point_y)*(bottom_point_y-left_point_y) + (bottom_point_x-right_point_x)*(bottom_point_x-right_point_x)+(bottom_point_y-right_point_y)*(bottom_point_y-right_point_y))
                cv2.putText(img, text, (10, 30), font, 1, (0, 255, 0), 2, cv2.LINE_AA, 0)  # 显示心位置

        cv2.imshow("median", median)
        cv2.imshow("img_3", img)
        
        tho = int(rect[0][0]) - 320
        size = -top_point_y + bottom_point_y
        
        print(        \
        ' | tho '   + str(    int(tho)).ljust(5,' ') + \
        ' | size '  + str(   int(size)).ljust(5,' ') )
       
        ser.write((        \
        ' | tho '   + str(    int(tho)).ljust(5,' ') + \
        ' | size '  + str(   int(size)).ljust(5,' ') + \
        '\r\n' ).encode())
        
        if cv2.waitKey(100) & 0xff == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()